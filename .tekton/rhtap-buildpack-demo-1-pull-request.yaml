apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  annotations:
    build.appstudio.openshift.io/repo: https://github.com/Michkov/rhtap-buildpack-demo-1?rev={{revision}}
    build.appstudio.redhat.com/commit_sha: '{{revision}}'
    build.appstudio.redhat.com/pull_request_number: '{{pull_request_number}}'
    build.appstudio.redhat.com/target_branch: '{{target_branch}}'
    pipelinesascode.tekton.dev/max-keep-runs: "3"
    pipelinesascode.tekton.dev/on-event: '[pull_request]'
    pipelinesascode.tekton.dev/on-target-branch: '[main]'
  creationTimestamp: null
  labels:
    appstudio.openshift.io/application: rhtap-buildpack-demo-1
    appstudio.openshift.io/component: rhtap-buildpack-demo-1
    pipelines.appstudio.openshift.io/type: build
  name: rhtap-buildpack-demo-1-on-pull-request
  namespace: mkovarik-tenant
spec:
  params:
  - name: dockerfile
    value: https://raw.githubusercontent.com/devfile-samples/devfile-sample-code-with-quarkus/main/src/main/docker/Dockerfile.jvm.staged
  - name: git-url
    value: '{{repo_url}}'
  - name: image-expires-after
    value: 5d
  - name: output-image
    value: quay.io/redhat-user-workloads/mkovarik-tenant/rhtap-buildpack-demo-1/rhtap-buildpack-demo-1:on-pr-{{revision}}
  - name: path-context
    value: .
  - name: revision
    value: '{{revision}}'
  pipelineSpec:
    finally:
      - name: show-sbom
        when:
          - input: $(params.enable-sbom)
            operator: in
            values: ["true"]
        params:
          - name: IMAGE_URL
            value: $(tasks.build-container.results.IMAGE_URL)
        taskSpec:
          steps:
            - name: show-sbom
              image: quay.io/halkyonio/buildpack-tools
              imagePullPolicy: Always
              script: |
                #!/usr/bin/env bash
                set -e
                ls -la
                pack sbom download $(params.IMAGE_URL) --remote
              volumeMounts:
                - name: layers-dir
                  mountPath: /layers
        #TODO: To be reviewed to see if we can share the project containing the sbom files generated
        # workspaces:
        #  - name: workspace
        #    workspace: workspace

        #TODO: Task cannot be used as sbom is already generated by buildpack - see: https://paketo.io/docs/howto/sbom/#access-the-software-bill-of-materials-on-a-sample-application
        # - taskRef:
        #   bundle: # quay.io/redhat-appstudio-tekton-catalog/task-show-sbom:0.1@sha256:23cc5e2315040ce142a9aa764fa455b31bb42baeb0c0ec049a12a19d844b2c8a
        #   name: show-sbom
      - name: show-summary
        when:
          - input: $(params.enable-sbom)
            operator: in
            values: ["true"]
        params:
          - name: pipelinerun-name
            value: $(context.pipelineRun.name)
          - name: git-url
            value: $(tasks.clone-repository.results.url)?rev=$(tasks.clone-repository.results.commit)
          - name: image-url
            value: $(params.output-image)
          - name: build-task-status
            value: $(tasks.build-container.status)
        taskRef:
          bundle: quay.io/redhat-appstudio-tekton-catalog/task-summary:0.1@sha256:b1b68a5203e66e7f2d0b9fe7996364cac26aa43f95825f7d88f699acd0ab6ec4
          name: summary
    params:
      - description: Source Repository URL
        name: git-url
        type: string
      - default: ""
        description: Revision of the Source Repository
        name: revision
        type: string
      - description: Fully Qualified Output Image
        name: output-image
        type: string
      - default: .
        description: The path to your source code
        name: path-context
        type: string
      - default: Dockerfile
        description: Path to the Dockerfile
        name: dockerfile
        type: string
      - default: "false"
        description: Force rebuild image
        name: rebuild
        type: string
      - description: A boolean indicating whether we would like to execute a step
        default: "false"
        name: enable-sbom
        type: string
      - default: "false"
        description: Skip checks against built image
        name: skip-checks
        type: string
      - default: "true"
        description: Skip optional checks, set false if you want to run optional checks
        name: skip-optional
        type: string
      - default: "false"
        description: Execute the build with network isolation
        name: hermetic
        type: string
      - default: ""
        description: Build dependencies to be prefetched by Cachi2
        name: prefetch-input
        type: string
      - default: "false"
        description: Java build
        name: java
        type: string
      - default: ""
        description: Snyk Token Secret Name
        name: snyk-secret
        type: string
      - default: ""
        description: Image tag expiration time, time values could be something like
          1h, 2d, 3w for hours, days, and weeks, respectively.
        name: image-expires-after
    results:
      - description: "The URL of the built `APPLICATION_IMAGE`"
        name: IMAGE_URL
        value: $(tasks.build-container.results.IMAGE_URL)
      - description: "The digest of the built `APPLICATION_IMAGE`"
        name: IMAGE_DIGEST
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - description: ""
        name: CHAINS-GIT_URL
        value: $(tasks.clone-repository.results.url)
      - description: ""
        name: CHAINS-GIT_COMMIT
        value: $(tasks.clone-repository.results.commit)
    tasks:
      - name: init
        params:
          - name: image-url
            value: $(params.output-image)
          - name: rebuild
            value: $(params.rebuild)
          - name: skip-checks
            value: $(params.skip-checks)
          - name: skip-optional
            value: $(params.skip-optional)
          - name: pipelinerun-name
            value: $(context.pipelineRun.name)
          - name: pipelinerun-uid
            value: $(context.pipelineRun.uid)
        taskRef:
          bundle: quay.io/redhat-appstudio-tekton-catalog/task-init:0.1@sha256:26586a7ef08c3e86dfdaf0a5cc38dd3d70c4c02db1331b469caaed0a0f5b3d86
          name: init
      - name: clone-repository
        params:
          - name: url
            value: $(params.git-url)
          - name: revision
            value: $(params.revision)
        runAfter:
          - init
        taskRef:
          bundle: quay.io/redhat-appstudio-tekton-catalog/task-git-clone:0.1@sha256:458f4853a01c3273bd76076ac1b015d5f901e70fb4b776f788b577adb25bf5f8
          name: git-clone
        when:
          - input: $(tasks.init.results.build)
            operator: in
            values:
              - "true"
        workspaces:
          - name: output
            workspace: workspace
          - name: basic-auth
            workspace: git-auth
      - name: prefetch-dependencies
        params:
          - name: input
            value: $(params.prefetch-input)
        runAfter:
          - clone-repository
        taskRef:
          bundle: quay.io/redhat-appstudio-tekton-catalog/task-prefetch-dependencies:0.1@sha256:8232d76d919a5b88609abd48c32fae1a91f4c712a49804d0cb80fa6a4b360b48
          name: prefetch-dependencies
        when:
          - input: $(params.hermetic)
            operator: in
            values:
              - "true"
        workspaces:
          - name: source
            workspace: workspace
      - name: build-container
        params:
          - name: IMAGE
            value: $(params.output-image)
          - name: DOCKERFILE
            value: $(params.dockerfile)
          - name: CONTEXT
            value: $(params.path-context)
          - name: HERMETIC
            value: $(params.hermetic)
          - name: PREFETCH_INPUT
            value: $(params.prefetch-input)
          - name: IMAGE_EXPIRES_AFTER
            value: $(params.image-expires-after)
          - name: COMMIT_SHA
            value: $(tasks.clone-repository.results.commit)
          # Buildpacks parameters
          - name: APP_IMAGE
            value: $(params.output-image)  #${IMAGE_NAME}
          - name: SOURCE_SUBPATH
            value: "" #getting-started
          - name: CNB_BUILDER_IMAGE
            value: paketobuildpacks/builder:0.1.361-tiny #${BUILDER_IMAGE}
          - name: CNB_LIFECYCLE_IMAGE
            value: buildpacksio/lifecycle:0.16.3 #${LIFECYCLE_IMAGE}
          - name: RUN_IMAGE
            value: paketobuildpacks/run:tiny #${RUN_IMAGE}
          - name: ENV_VARS
            value:
              - BP_NATIVE_IMAGE=false
              - BP_MAVEN_BUILT_ARTIFACT=target/quarkus-app/lib/ target/quarkus-app/*.jar target/quarkus-app/app/ target/quarkus-app/quarkus/
              - BP_MAVEN_BUILD_ARGUMENTS=package -DskipTests=true -Dmaven.javadoc.skip=true -Dquarkus.package.type=fast-jar
        runAfter:
          - prefetch-dependencies
        taskSpec:
          workspaces:
          - name: source
            description: Directory where application source is located.
          - name: cache
            description: Directory where cache is stored (when no cache image is provided).
            optional: true
       
          params:
            - name: CNB_BUILDER_IMAGE
              description: The image on which builds will run (must include lifecycle and compatible buildpacks).
            - name: CNB_LIFECYCLE_IMAGE
              description: The image to use when executing sensitive phases.
              default: docker.io/buildpacksio/lifecycle:0.10.2@sha256:1bf8d3fc41d2fdf0ee4abdad50038ab8902ef58c74f5bcfc432c26767d889ed0
            - name: APP_IMAGE
              description: The name of where to store the app image.
            - name: RUN_IMAGE
              description: Reference to a run image to use.
              default: "paketobuildpacks/run:tiny"
            - name: CACHE_IMAGE
              description: The name of the persistent app cache image (if no cache workspace is provided).
              default: ""
            - name: PROCESS_TYPE
              description: The default process type to set on the image.
              default: ""
            - name: SOURCE_SUBPATH
              description: A subpath within the `source` input where the source to build is located.
              default: ""
            - name: ENV_VARS
              type: array
              description: Environment variables to set during _build-time_.
              default: []
            - name: PLATFORM_DIR
              description: The name of the platform directory.
              default: empty-dir
            - name: USER_ID
              description: The user ID of the builder image user.
              default: "1000"
            - name: GROUP_ID
              description: The group ID of the builder image user.
              default: "1000"
            - name: USER_HOME
              description: Absolute path to the user's home directory.
              default: /tekton/home
          results:
            - name: APP_IMAGE_DIGEST
              description: The digest of the built `APP_IMAGE`.
            - name: IMAGE_URL
              description: The URL of the built `APP_IMAGE`. Used by RHTAP.
            - name: IMAGE_DIGEST
              description: The digest of the built `APP_IMAGE`. Used by RHTAP.
          stepTemplate:
            env:
              - name: CNB_PLATFORM_API
                value: "0.10"
              - name: HOME
                value: $(params.USER_HOME)
              - name: DOCKER_CONFIG
                value: $(params.USER_HOME)/.docker
       
          steps:
            - name: prepare
              image: quay.io/swsmirror/bash
              args:
                - "--env-vars"
                - "$(params.ENV_VARS[*])"
              script: |
                #!/usr/bin/env bash
                set -e
       
                # TODO: To be reviewed and aligned with Shipwright ClusterBuildStrategy
                if [[ "$(workspaces.cache.bound)" == "true" ]]; then
                  echo "> Setting permissions on '$(workspaces.cache.path)'..."
                  chown -R "$(params.USER_ID):$(params.GROUP_ID)" "$(workspaces.cache.path)"
                fi
       
                for path in "/tekton/home" "/layers" "$(workspaces.source.path)"; do
                  echo "> Setting permissions on '$path'..."
                  chown -R "$(params.USER_ID):$(params.GROUP_ID)" "$path"
                done
       
                echo "> Parsing additional configuration..."
                parsing_flag=""
                envs=()
                for arg in "$@"; do
                    if [[ "$arg" == "--env-vars" ]]; then
                        echo "-> Parsing env variables..."
                        parsing_flag="env-vars"
                    elif [[ "$parsing_flag" == "env-vars" ]]; then
                        envs+=("$arg")
                    fi
                done
       
                echo "> Processing any environment variables..."
                ENV_DIR="/platform/env"
       
                echo "--> Creating 'env' directory: $ENV_DIR"
                mkdir -p "$ENV_DIR"
       
                for env in "${envs[@]}"; do
                    IFS='=' read -r key value string <<< "$env"
                    if [[ "$key" != "" && "$value" != "" ]]; then
                        path="${ENV_DIR}/${key}"
                        echo "--> Writing ${path}..."
                        echo -n "$value" > "$path"
                    fi
                done
              volumeMounts:
                - name: layers-dir
                  mountPath: /layers
                - name: $(params.PLATFORM_DIR)
                  mountPath: /platform

                    #            - name: write-test
                    #              image: quay.io/skopeo/stable
                    #              imagePullPolicy: Always
                    #              args:
                    #                - copy
                    #                - docker://quay.io/skopeo/stable:latest
                    #                - docker://quay.io/redhat-user-workloads/mkovarik-tenant/rhtap-buildpack-demo-1/rhtap-buildpack-demo-1:abc
                    #              volumeMounts:
                    #                - name: layers-dir
                    #                  mountPath: /layers

            - name: analyze
              image: $(params.CNB_LIFECYCLE_IMAGE)
              imagePullPolicy: Always
              command: ["/cnb/lifecycle/analyzer"]
              args:
                - "-layers=/layers"
                - "-cache-image=$(params.CACHE_IMAGE)"
                - "-run-image=$(params.RUN_IMAGE)"
                - "-uid=$(params.USER_ID)"
                - "-gid=$(params.GROUP_ID)"
                - "quay.io/redhat-user-workloads/mkovarik-tenant/rhtap-buildpack-demo-1/rhtap-buildpack-demo-1:abc"
              volumeMounts:
                - name: layers-dir
                  mountPath: /layers
       
            - name: detect
              image: $(params.CNB_BUILDER_IMAGE)
              imagePullPolicy: Always
              command: ["/cnb/lifecycle/detector"]
              args:
                - "-app=$(workspaces.source.path)/$(params.SOURCE_SUBPATH)"
                - "-group=/layers/group.toml"
                - "-plan=/layers/plan.toml"
              volumeMounts:
                - name: layers-dir
                  mountPath: /layers
                - name: $(params.PLATFORM_DIR)
                  mountPath: /platform
                - name: empty-dir
                  mountPath: /tekton/home
       
            - name: restore
              image: $(params.CNB_LIFECYCLE_IMAGE)
              imagePullPolicy: Always
              command: ["/cnb/lifecycle/restorer"]
              args:
                - "-group=/layers/group.toml"
                - "-layers=/layers"
                - "-cache-dir=$(workspaces.cache.path)"
                - "-cache-image=$(params.CACHE_IMAGE)"
                - "-uid=$(params.USER_ID)"
                - "-gid=$(params.GROUP_ID)"
              volumeMounts:
                - name: layers-dir
                  mountPath: /layers
       
            - name: build
              image: $(params.CNB_BUILDER_IMAGE)
              imagePullPolicy: Always
              command: ["/cnb/lifecycle/builder"]
              args:
                - "-app=$(workspaces.source.path)/$(params.SOURCE_SUBPATH)"
                - "-layers=/layers"
                - "-group=/layers/group.toml"
                - "-plan=/layers/plan.toml"
              volumeMounts:
                - name: layers-dir
                  mountPath: /layers
                - name: $(params.PLATFORM_DIR)
                  mountPath: /platform
                - name: empty-dir
                  mountPath: /tekton/home
       
            - name: export
              image: $(params.CNB_LIFECYCLE_IMAGE)
              imagePullPolicy: Always
              command: ["/cnb/lifecycle/exporter"]
              args:
                - "-app=$(workspaces.source.path)/$(params.SOURCE_SUBPATH)"
                - "-layers=/layers"
                - "-group=/layers/group.toml"
                - "-cache-dir=$(workspaces.cache.path)"
                - "-cache-image=$(params.CACHE_IMAGE)"
                - "-report=/layers/report.toml"
                - "-process-type=$(params.PROCESS_TYPE)"
                - "-uid=$(params.USER_ID)"
                - "-gid=$(params.GROUP_ID)"
                - "-stack=/layers/stack.toml"
                - "$(params.APP_IMAGE)"
              volumeMounts:
                - name: layers-dir
                  mountPath: /layers
       
            - name: results
              image: quay.io/swsmirror/bash
              script: |
                #!/usr/bin/env bash
                set -e
                cat /layers/report.toml | grep "digest" | cut -d'"' -f2 | cut -d'"' -f2 | tr -d '\n' | tee $(results.APP_IMAGE_DIGEST.path)
                cat $(results.APP_IMAGE_DIGEST.path) | tee "$(results.IMAGE_DIGEST.path)"
       
                echo -n "$(params.APP_IMAGE)" | tee "$(results.IMAGE_URL.path)"
              volumeMounts:
                - name: layers-dir
                  mountPath: /layers
       
          volumes:
            - name: empty-dir
              emptyDir: {}
            - name: layers-dir
              emptyDir: {}
        when:
          - input: $(tasks.init.results.build)
            operator: in
            values:
              - "true"
        workspaces:
          - name: source
            workspace: workspace

      - name: inspect-image
        params:
          - name: IMAGE_URL
            value: $(tasks.build-container.results.IMAGE_URL)
          - name: IMAGE_DIGEST
            value: $(tasks.build-container.results.IMAGE_DIGEST)
        runAfter:
          - build-container
        taskRef:
          bundle: quay.io/redhat-appstudio-tekton-catalog/task-inspect-image:0.1@sha256:604531fb0ec3ddb4ec51e9dbd7f0074cd226093e77ba59a3d9ea5a31293889da
          name: inspect-image
        when:
          - input: $(params.skip-checks)
            operator: in
            values:
              - "false"
        workspaces:
          - name: source
            workspace: workspace
      #  TODO: What is the purpose of such step
      #- name: label-check
      #  runAfter:
      #  - inspect-image
      #  taskRef:
      #    bundle: quay.io/redhat-appstudio-tekton-catalog/task-label-check:0.1@sha256:d5815b438362ba74eb44e7367bcab15b180c9f9351b801283511da356f3559f0
      #    name: label-check
      #  when:
      #  - input: $(params.skip-checks)
      #    operator: in
      #    values:
      #    - "false"
      #  workspaces:
      #  - name: workspace
      #    workspace: workspace
      #  TODO: What is the purpose of such step
      #- name: optional-label-check
      #  params:
      #  - name: POLICY_NAMESPACE
      #    value: optional_checks
      #  runAfter:
      #  - inspect-image
      #  taskRef:
      #    bundle: quay.io/redhat-appstudio-tekton-catalog/task-label-check:0.1@sha256:d5815b438362ba74eb44e7367bcab15b180c9f9351b801283511da356f3559f0
      #    name: label-check
      #  when:
      #  - input: $(params.skip-optional)
      #    operator: in
      #    values:
      #    - "false"
      #  workspaces:
      #  - name: workspace
      #    workspace: workspace
      #  TODO: What is the purpose of such step
      #- name: deprecated-base-image-check
      #  params:
      #  - name: BASE_IMAGES_DIGESTS
      #    value: $(tasks.build-container.results.BASE_IMAGES_DIGESTS)
      #  taskRef:
      #    bundle: quay.io/redhat-appstudio-tekton-catalog/task-deprecated-image-check:0.2@sha256:5ccacaaec39f94550b3f92595908d2fae972116138fb7ac8b072b5f26808b000
      #    name: deprecated-image-check
      #  when:
      #  - input: $(params.skip-checks)
      #    operator: in
      #    values:
      #    - "false"
      #  workspaces:
      #  - name: test-ws
      #    workspace: workspace
      - name: clair-scan
        params:
          - name: image-digest
            value: $(tasks.build-container.results.IMAGE_DIGEST)
          - name: image-url
            value: $(tasks.build-container.results.IMAGE_URL)
        runAfter:
          - build-container
        taskRef:
          bundle: quay.io/redhat-appstudio-tekton-catalog/task-clair-scan:0.1@sha256:4180e299be38b8c0ff90e3721ddcff6066a849fb0b0cc86bbee8f22ca17a3b4f
          name: clair-scan
        when:
          - input: $(params.skip-checks)
            operator: in
            values:
              - "false"
      - name: sast-snyk-check
        params:
          - name: SNYK_SECRET
            value: $(params.snyk-secret)
        runAfter:
          - clone-repository
        taskRef:
          bundle: quay.io/redhat-appstudio-tekton-catalog/task-sast-snyk-check:0.1@sha256:2847ad8183aa020dfda9398cc4b0bcb2a54895d30f1012dddb3c4b6e01d156ae
          name: sast-snyk-check
        when:
          - input: $(params.skip-checks)
            operator: in
            values:
              - "true"
          - input: $(params.snyk-secret)
            operator: notin
            values:
              - ""
        workspaces:
          - name: workspace
            workspace: workspace
      - name: clamav-scan
        params:
          - name: image-digest
            value: $(tasks.build-container.results.IMAGE_DIGEST)
          - name: image-url
            value: $(tasks.build-container.results.IMAGE_URL)
        runAfter:
          - build-container
        taskRef:
          bundle: quay.io/redhat-appstudio-tekton-catalog/task-clamav-scan:0.1@sha256:7370ea5a4205ae9062ea5393e673549fa8f8ea2e9985bd7a949435064cca93b7
          name: clamav-scan
        when:
          - input: $(params.skip-checks)
            operator: in
            values:
              - "true"
      - name: sbom-json-check
        params:
          - name: IMAGE_URL
            value: $(tasks.build-container.results.IMAGE_URL)
          - name: IMAGE_DIGEST
            value: $(tasks.build-container.results.IMAGE_DIGEST)
        runAfter:
          - build-container
        taskRef:
          bundle: quay.io/redhat-appstudio-tekton-catalog/task-sbom-json-check:0.1@sha256:dff6065790ed1c3b32878450a0bac33917b27a541d518fbf974cb063c1bd0ee1
          name: sbom-json-check
        when:
          - input: $(params.skip-checks)
            operator: in
            values:
              - "false"
    workspaces:
      - name: workspace
      - name: git-auth
        optional: true
  workspaces:
    - name: workspace
      volumeClaimTemplate:
        metadata:
          creationTimestamp: null
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
        status: {}
    - name: git-auth
      secret:
        secretName: '{{ git_auth_secret }}'
